const dom = {
    testName: document.getElementById('test__name'),
    questionBlock: document.getElementById('question-block'),
    questionNumber: document.getElementById('question-number'),
    question: document.getElementById('question'),
    answers: document.getElementById('answers'),
    btn: document.getElementById('btn'),


    result: document.getElementById('result'),
    resultIcon: document.getElementById('result-icon'),
    resultStatus: document.getElementById('result-status'),

}

//–º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
const newRandomArray = randomArray(data.questions, 4)

let questionIndex = 1
//–í—ã–±—Ä–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å
let isSelectAnswer = false

//—á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
let rightAnswersCount = 0

//–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª
let answersCountForTetsComplete = 1



//—Ä–∞–Ω–¥–æ–º–Ω–∞—è –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ 
//count-max –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ
function randomArray(arr, count) {
    let randomArr = []

    while(arr.length && randomArray.length < count) {
        const maxIndex = arr.length - 1
        const randomIndex = (Math.random() * maxIndex).toFixed(0)
        const cutQuestion = arr.splice(randomIndex, 1)
        
        randomArr = randomArr.concat(cutQuestion)
       
    }

   
    return randomArr
}



//–†–µ–Ω–¥–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


//–†–µ–Ω–¥–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function renderAnswers(answers, rightAnswerNumber) {
    const answersHtml = []
    for(let i = 0; i < answers.length; i ++) {
        if(i+1 === rightAnswerNumber) {
            answersHtml.push(`<div class="test__answer" data-valid >${answers[i]}</div>`)
        }else {
            answersHtml.push(`<div class="test__answer"  >${answers[i]}</div>`)
        }
    }

    
    dom.answers.innerHTML = answersHtml.join('')


}

const answers = newRandomArray[0].answers
const rightAnswerNumber = newRandomArray[0].rightAnswer

renderAnswers(answers,rightAnswerNumber )

//–≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ 
function renderALL(data,questionNumber) {
    const {answers, rightAnswer}= data
  
    dom.questionNumber.innerHTML = questionNumber + ''
    dom.question.innerHTML = data.question
    renderAnswers(answers, rightAnswer)
    blockButton(true)
}

renderALL(newRandomArray[0],1)

//–∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–ª–µ–¥ –≤–æ–ø—Ä–æ—Å
dom.btn.onclick = () => {
    const number = newRandomArray[questionIndex]
    const questionEl = questionIndex + 1
    const nextQuestion = newRandomArray[questionIndex + 1]
    if(number) {
        
        renderALL(number,questionEl)
        questionIndex = questionIndex + 1
        isSelectAnswer = !isSelectAnswer
        if (!nextQuestion) {
            changeButton()
        }
    } else {
        
        renderResult()
    }

}

//–∫–ª–∏–∫ –ø–æ –æ—Ç–≤–µ—Ç—É 
dom.answers.onclick = (event) => {
    const isAnswerClick = event.target.classList.contains('test__answer')
   if(isAnswerClick && !isSelectAnswer ) {
    renderAnswersStatus(event.target)
    isSelectAnswer = !isSelectAnswer
    blockButton(false)
   }
}
//–§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ (–Ω–µ–≤–µ—Ä–Ω—ã–π/–≤–µ—Ä–Ω—ã–π) –æ—Ç–≤–µ—Ç–∞
function renderAnswersStatus(answerClick) {
    const isValid = answerClick.dataset.valid !== undefined
    if(isValid) {
        answerClick.classList.add('valid')
        rightAnswersCount++
    } else {
        answerClick.classList.add('invalid')
        const rightAnswerClick = answerClick.parentNode.querySelector('[data-valid]')
        rightAnswerClick.classList.add('valid')
    }
}

//–§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏
function blockButton(isDisable) {
    if(isDisable) {
        dom.btn.classList.add('disable')
    } else {
        dom.btn.classList.remove('disable')
    }
}
//–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∫–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)

function changeButton() {
    dom.btn.innerText = '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    dom.btn.dataset.result = true
}

//–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function renderResult() {
    dom.questionBlock.style.display = 'none'
    dom.answers.style.display = 'none'
    dom.btn.style.display = 'none'
    dom.result.style.display = 'block'
    if  (testIsCorrect()) {
        dom.resultIcon.innerText = 'üéâ'
        dom.resultStatus.innerText = '–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç'
        dom.resultStatus.classList.add('valid')
    } else {
        dom.resultIcon.innerText = '‚òπÔ∏è'
        dom.resultStatus.innerText = '–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç'
        dom.resultStatus.classList.add('invalid')
    }
}

//–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —Ç–µ—Å—Ç
function testIsCorrect() {
   return answersCountForTetsComplete <= rightAnswersCount
}